package ug.awolak.techut.zad03.service;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import ug.awolak.techut.zad03.domain.Bed;

public class BedService {

	private final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
    private final Connection connection;
    private final Statement statement;
    private final String CREATE_TABLE_SQL = "CREATE TABLE Bed (id bigint GENERATED BY DEFAULT AS IDENTITY, name VARCHAR(25), width DOUBLE, productionDate DATE, isSoft BOOLEAN)";
    private boolean tableExists = false;
    
    private PreparedStatement addBedStmt;
    private PreparedStatement getAllBedsStmt;
    private PreparedStatement getBedByIdStmt;
    private PreparedStatement deleteAllBedsStmt;
    private PreparedStatement deleteBedByIdStmt;
    private PreparedStatement getBedsWiderThanStmt;

    public BedService() throws SQLException {
        connection = DriverManager.getConnection(URL);
        statement = connection.createStatement();

        ResultSet rs = connection.getMetaData().getTables(null, null, null, null);

        while (rs.next()) {
            if ("Bed".equalsIgnoreCase(rs.getString("table_name"))) {
                tableExists = true;
                break;
            }
        }

        if (!tableExists) {
            statement.executeUpdate(CREATE_TABLE_SQL);
        }
        
        addBedStmt = connection.prepareStatement("INSERT INTO Bed (name, width, productionDate, isSoft) VALUES (?,?,?,?)");
        getAllBedsStmt = connection.prepareStatement("SELECT * FROM Bed");
        getBedByIdStmt = connection.prepareStatement("SELECT * FROM Bed WHERE ID=?");
        deleteAllBedsStmt = connection.prepareStatement("DELETE FROM Bed");
        deleteBedByIdStmt = connection.prepareStatement("DELETE FROM Bed WHERE ID=?");
        getBedsWiderThanStmt = connection.prepareStatement("SELECT * FROM Bed WHERE width > ?");
    }
    
    public void addBed(Bed bed) {
    	try {
    		addBedStmt.setString(1, bed.getName());
    		addBedStmt.setDouble(2, bed.getWidth());
    		addBedStmt.setDate(3, bed.getProductionDate());
    		addBedStmt.setBoolean(4, bed.isSoft());
    		
    		addBedStmt.executeUpdate();
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    }
    
    public List<Bed> getAllBeds() {
    	List<Bed> beds = new ArrayList<Bed>();
    	try {
    		ResultSet rs = getAllBedsStmt.executeQuery();
    		
    		while (rs.next() ) {
    			Bed newBed = new Bed(rs.getString("name"),
    					rs.getDouble("width"), rs.getDate("productionDate"), rs.getBoolean("isSoft"));
    			beds.add(newBed);
    		}
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    	
    	return beds;
    }
    
    public Bed getBedById(int id) {
		Bed newBed = new Bed();
    	try {
    		getBedByIdStmt.setInt(1, id);
    		ResultSet rs = getBedByIdStmt.executeQuery();
    		
    		while (rs.next()) {
    			newBed = new Bed(rs.getString("name"),
    					rs.getDouble("width"), rs.getDate("productionDate"), rs.getBoolean("isSoft"));
    		}
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    	
    	return newBed;
    }
    
    public void deleteAllBeds() {
    	try {
    		deleteAllBedsStmt.executeUpdate();
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    }
    
    public void deleteBedById(int id) {
    	try {
    		deleteBedByIdStmt.setInt(1, id);
    		deleteBedByIdStmt.executeUpdate();
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
}
   

	public boolean addBeds(List<Bed> beds) {
		try {
            connection.setAutoCommit(false);

            for (Bed Bed : beds) {
            	addBedStmt.setString(1, Bed.getName());
        		addBedStmt.setDouble(2, Bed.getWidth());
        		addBedStmt.setDate(3, Bed.getProductionDate());
        		addBedStmt.setBoolean(4, Bed.isSoft());

        		addBedStmt.executeUpdate();
            }

            connection.commit();

            return true;
        } catch (SQLException e) {
            System.out.println("Rollback");
            try {
                connection.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }

        return false;
    }
    
    
	public List<Bed> getBedsWiderThan(double width) {
		List<Bed> beds = new ArrayList<Bed>();
    	try {
    		getBedsWiderThanStmt.setDouble(1, width);
    		ResultSet rs = getBedsWiderThanStmt.executeQuery();
    		
    		while (rs.next() ) {
    			Bed newBed = new Bed(rs.getString("name"),
    					rs.getDouble("width"), rs.getDate("productionDate"), rs.getBoolean("isSoft"));
    			beds.add(newBed);
    		}
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    	
    	return beds;
	}
}
    
